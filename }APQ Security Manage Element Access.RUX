FORMAT==100
#############################################################################################################################
#Region : Rule Header
# CUBEWISE APLIQODE FRAMEWORK VERSION 3.05
# Copyright Apliqo AG, a Cubewise Company. All rights reserved.
# This software and related documentation are provided under a license agreement containing restrictions on use and disclosure
# and are protected by intellectual property laws. Except as expressly permitted in your license agreement or allowed by law,
# you may not use, copy, reproduce, translate, broadcast, modify, license, transmit, distribute, exhibit, perform, publish,
# or display any part, in any form, or by any means.
##############################################################################################################################
##~~   Start Rule File   ~~##
##############################################################################################################################
SKIPCHECK;
FEEDSTRINGS;
##############################################################################################################################
# DEVELOPER: 	Apliqo AG
# LAST UPDATE:  2020-06-03 alternate hierarchy support (swap }APQ Dimensions for }APQ Dimension Hierarchies and change numeric measures to string)
##############################################################################################################################
#Region @DOC
# The cube **}APQ Security Manage Element Permissions** allows security for element security accross all dimensions to be managed all 
# in the one place. 
#
# A useful feature of managing  element security via this cube is that in addition to point security and recursive inheritance of security. 
# Wildcards and attribute values can also be used for setting security.
#
# The permissions entered in this cube are applied by running the **}APQ.Security.Elements.LoadAccessRights** process. 
#EndRegion @DOC
#EndRegion Header
##############################################################################################################################

#Region - Initial check. Is dimension in framework
[ ] = S: 
IF( AttrS( '}APQ Dimensions', AttrS( '}APQ Dimension Hierarchies', !}APQ Dimension Hierarchies, 'Dimension' ), 'ELEMENT_FRAMEWORK' ) @= 'TRUE' 
  & ( AttrS( '}APQ Dimensions', AttrS( '}APQ Dimension Hierarchies', !}APQ Dimension Hierarchies, 'Dimension' ),  'ELEMENT_SECURITY' ) @= 'TRUE' % DB( '}APQ Security Manage Element Security Groups', AttrS( '}APQ Dimension Hierarchies', !}APQ Dimension Hierarchies, 'Dimension' ), 'Require Element Security') = 1 ),
    Continue,
    ''
);

[ ] = S: 
IF( ElLev( '}APQ Dimension Hierarchies', !}APQ Dimension Hierarchies ) > 0,
    Continue,
    IF( Scan( ':LEAVES', Upper(!}APQ Dimension Hierarchies) ) > 0,
        '',
        IF( AttrS( '}APQ Dimension Hierarchies', !}APQ Dimension Hierarchies, 'Dimension' ) @<> AttrS( '}APQ Dimension Hierarchies', !}APQ Dimension Hierarchies, 'Hierarchy' ),
            Continue,
            DB('}APQ Security Manage Element Access', !}APQ Groups, AttrS( '}APQ Dimension Hierarchies', !}APQ Dimension Hierarchies, 'Dimension' ), !}APQ Dimension Elements, !}APQ Security Manage Element Access Measure)
        )
    )
);
#EndRegion

#Region - Check Element Validity to dimension
[ '}APQ Security Manage Element Access Measure':'IsElementPrincipal' ] = S: 
IF( DimNm( !}APQ Dimension Hierarchies, DimIx( !}APQ Dimension Hierarchies, !}APQ Dimension Elements ) ) @= !}APQ Dimension Elements,
    '1',
    ''
);

[ '}APQ Security Manage Element Access Measure':'IsElementAlias' ] = S: 
IF( DimIx( !}APQ Dimension Hierarchies, !}APQ Dimension Elements ) = 0,
    '',
    IF( DimNm( !}APQ Dimension Hierarchies, DimIx( !}APQ Dimension Hierarchies, !}APQ Dimension Elements ) ) @<> !}APQ Dimension Elements,
        '1',
        ''
    ) 
);

[ '}APQ Security Manage Element Access Measure':'ElementPrincipalName' ] = S: 
IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'IsElementPrincipal' ) @= '1',
    !}APQ Dimension Elements,
    IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'IsElementAlias' ) @= '1',
        DimNm( !}APQ Dimension Hierarchies, DimIx( !}APQ Dimension Hierarchies, !}APQ Dimension Elements ) ),
        ''
    ) 
);
#EndRegion

#Region - Exceptions & exclusions
[ '}APQ Dimension Elements':'TOTAL DIMENSION ELEMENTS', '}APQ Security Manage Element Access Measure':{'Inactive','Exclusions','Permission Type','Permission Level'} ] = S: STET;

[ '}APQ Security Manage Element Access Measure':{'Inactive','Exclusions'} ] = S: 
IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'IsElementPrincipal' ) @= '',
    '',
    STET 
);

[ '}APQ Security Manage Element Access Measure':{'Permission Type','Permission Level'} ] = S: 
IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'IsElementPrincipal' ) @= '',
    '',
    STET 
);

[ '}APQ Security Manage Element Access Measure':{'Wildcard Entry','Wildcard Alias'} ] = S: 
IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Permission Type' ) @= 'WILDCARD'
  % DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Permission Type' ) @= 'ATTRIBUTE',
    STET,
    '' 
);

[ '}APQ Security Manage Element Access Measure':{'Exclusion Type','Exclusion Entry'} ] = S: 
IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Exclusions' ) @= '1',
    STET,
    '' 
);

[ '}APQ Security Manage Element Access Measure':'Exclusion Wildcard Alias' ] = S: 
IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Exclusion Type' ) @= 'WILDCARD',
    IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Permission Type' ) @= 'WILDCARD',
        DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Wildcard Alias' ),
        STET
    ),
    IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Exclusion Type' ) @= 'ATTRIBUTE',
        STET,
        ''
    )
);

[ '}APQ Security Manage Element Access Measure':'Effective Permission Level' ] = S: 
IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'IsElementPrincipal' ) @= '1',
    STET,
    IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'IsElementAlias' ) @= '1',
        DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, DimNm(!}APQ Dimension Hierarchies, DimIx( !}APQ Dimension Hierarchies, !}APQ Dimension Elements ) ), 'Effective Permission Level' ),
        ''
    ) 
);
#EndRegion

#Region - Inheritance Level
[ '}APQ Security Manage Element Access Measure':'InheritToDimLevel' ] = S: 
IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Permission Type' ) @= '',
    '',
    IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Permission Type' ) @= 'ALL'
        % DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Permission Type' ) @= 'WILDCARD'
        % DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Permission Type' ) @= 'RECURSIVE',
        STET,
        IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Permission Type' ) @= 'POINT',
            Trim( Str( ElLev( !}APQ Dimension Hierarchies, !}APQ Dimension Elements ), 3, 0 ) ),
            '0' 
        )
    )
);

[ '}APQ Security Manage Element Access Measure':'ExcludeToDimLevel' ] = S: 
IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Exclusion Type' ) @= '',
    '',
    IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Exclusion Type' ) @= 'WILDCARD'
        % DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Exclusion Type' ) @= 'RECURSIVE',
        STET,
        IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Exclusion Type' ) @= 'POINT',
            Trim( Str( ElLev( !}APQ Dimension Hierarchies, DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Exclusion Entry' ) ), 3, 0 ) ),
            '0' 
        ) 
    ) 
);
#EndRegion

#Region - Check current security level
[ '}APQ Security Manage Element Access Measure':'Current Permission Level' ] = S: 
IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'IsElementPrincipal' ) @= '1'
  % DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'IsElementAlias' ) @= '1',
    IF( DimIx( '}Cubes', '}ElementSecurity_' | AttrS( '}APQ Dimension Hierarchies', !}APQ Dimension Hierarchies, 'Dimension' ) ) > 0,
        IF( ElLev( '}APQ Dimension Hierarchies', !}APQ Dimension Hierarchies ) = 1,
            DB( '}ElementSecurity_' | !}APQ Dimension Hierarchies, !}APQ Dimension Elements, !}APQ Groups ),
            DB( '}ElementSecurity_' | AttrS( '}APQ Dimension Hierarchies', !}APQ Dimension Hierarchies, 'Dimension' ), AttrS( '}APQ Dimension Hierarchies', !}APQ Dimension Hierarchies, 'Hierarchy' ):!}APQ Dimension Elements, !}APQ Groups )
        ),
        'WRITE'
    ),
    '' 
);

# For validation NONE @= '' in terms of functional equivalence
[ '}APQ Security Manage Element Access Measure':'Current Permission Validation' ] = S: 
IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'IsElementPrincipal' ) @= '1' 
  % DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'IsElementAlias' ) @= '1',
    IF( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Effective Permission Level' ) @= DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Current Permission Level' ),
        '',
        IF( ( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Effective Permission Level' ) @= '' & DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Current Permission Level' ) @= 'NONE' ) 
          % ( DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Effective Permission Level' ) @= 'NONE' & DB( '}APQ Security Manage Element Access', !}APQ Groups, !}APQ Dimension Hierarchies, !}APQ Dimension Elements, 'Current Permission Level' ) @= '' ),
            '',
            '1'
        )
    ),
    '' 
);
#EndRegion

#############################
FEEDERS;
#############################

[ '}APQ Security Manage Element Access Measure':'Effective Permission Level' ] => [ '}APQ Security Manage Element Access Measure':'Current Permission Level' ], [ '}APQ Security Manage Element Access Measure':'Current Permission Validation' ];


#############################
### END
#############################
